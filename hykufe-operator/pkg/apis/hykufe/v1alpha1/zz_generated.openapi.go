// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJob":       schema_pkg_apis_hykufe_v1alpha1_HorovodJob(ref),
		"HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobSpec":   schema_pkg_apis_hykufe_v1alpha1_HorovodJobSpec(ref),
		"HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobStatus": schema_pkg_apis_hykufe_v1alpha1_HorovodJobStatus(ref),
	}
}

func schema_pkg_apis_hykufe_v1alpha1_HorovodJob(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HorovodJob is the Schema for the horovodjobs API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobSpec", "HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_hykufe_v1alpha1_HorovodJobSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HorovodJobSpec defines the desired state of HorovodJob",
				Properties: map[string]spec.Schema{
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSpec",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.VolumeSpec"),
									},
								},
							},
						},
					},
					"dataSources": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.DataSourceSpec"),
									},
								},
							},
						},
					},
					"master": {
						SchemaProps: spec.SchemaProps{
							Description: "Tasks specifies the task specification of Job",
							Ref:         ref("HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.TaskSpec"),
						},
					},
					"worker": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.TaskSpec"),
						},
					},
					"maxRetry": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the maximum number of retries before marking this Job failed. Defaults to 3.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"ttlSecondsAfterFinished": {
						SchemaProps: spec.SchemaProps{
							Description: "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Completed or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, indicates the job's priority.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.DataSourceSpec", "HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.TaskSpec", "HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.VolumeSpec"},
	}
}

func schema_pkg_apis_hykufe_v1alpha1_HorovodJobStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HorovodJobStatus defines the observed state of HorovodJob",
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "Current state of Job.",
							Ref:         ref("HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobState"),
						},
					},
					"minAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimal available pods to run for this Job",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pending": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pending pods.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"running": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of running pods.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"succeeded": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pods which reached phase Succeeded.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"failed": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pods which reached phase Failed.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"terminating": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pods which reached phase Terminating.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"unknown": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pods which reached phase Unknown.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Current version of job",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"retryCount": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of Job retries.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"controlledResources": {
						SchemaProps: spec.SchemaProps{
							Description: "The resources that controlled by this job, e.g. Service, ConfigMap",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"HyKuFe/hykufe-operator/pkg/apis/hykufe/v1alpha1.HorovodJobState"},
	}
}
